// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreSQLConfig;

#nullable disable

namespace PostgreSQLDb.Migrations
{
    [DbContext(typeof(EducationPageDbContext))]
    [Migration("20240414215403_ChangedBugWithStocksRow")]
    partial class ChangedBugWithStocksRow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EducationPageWebAPI.Models.Article", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InThemePostionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThemeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArticleId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = "2567fdd3-bc16-469f-bb10-88830ba3035d",
                            Annotation = "This article is made to test the db connection",
                            InThemePostionNumber = 1,
                            Name = "Init article",
                            Text = "This article is very interesting, testing. This article is very interesting, testing.\nThis article is very interesting, testing. This article is very interesting, testing.\nThis article is very interesting, testing. This article is very interesting, testing.\nThis article is very interesting, testing. This article is very interesting, testing.\nThis article is very interesting, testing. This article is very interesting, testing.\nThis article is very interesting, testing. This article is very interesting, testing.",
                            ThemeId = "1"
                        });
                });

            modelBuilder.Entity("Models.Models.Theme", b =>
                {
                    b.Property<string>("ThemeId")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ThemeId");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            ThemeId = "1",
                            ImagePath = "/images/Stocks.png",
                            Name = "Stocks"
                        },
                        new
                        {
                            ThemeId = "2",
                            ImagePath = "/images/Bonds.png",
                            Name = "Bonds"
                        },
                        new
                        {
                            ThemeId = "3",
                            ImagePath = "/images/Crypto.png",
                            Name = "Crypto"
                        },
                        new
                        {
                            ThemeId = "4",
                            ImagePath = "/images/ETF.png",
                            Name = "ETF"
                        },
                        new
                        {
                            ThemeId = "5",
                            ImagePath = "/images/Goods.png",
                            Name = "Goods"
                        },
                        new
                        {
                            ThemeId = "6",
                            ImagePath = "/images/Forex.png",
                            Name = "Forex"
                        },
                        new
                        {
                            ThemeId = "7",
                            ImagePath = "/images/Futures.png",
                            Name = "Futures"
                        },
                        new
                        {
                            ThemeId = "8",
                            ImagePath = "/images/TechAnalysis.png",
                            Name = "TechAnalysis"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
